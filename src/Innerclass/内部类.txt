内部类是定义在另一个类内部的类。使用内部类的原因主要有三点：
    1.内部类的方法可以使用该类定义所在的作用域中的数据，包括私有的数据；
    2.内部类可以对同一个包中的其他类隐藏起来；
    3.当想要定义一个回调函数且不想要编写大量代码的时候，使用匿名内部类比较便捷。

    内部类可以直接访问外围类对象的数据域。内部类的对象总有一个隐士引用，它指向创建它的外部类对象。

内部类的特殊语法规则：
    OuterClass.this 表示外围类的引用。例如：talkingClock.this.beep表示外围类的变量。
    在外围类的作用域之外，可以这样引用内部类：
    OuterClass.InnerClass

局部内部类：
    public void start(){
        class TimerPrinter implements ActionListener{
            public void actionPerformed(ActionEvent event){
            Date now = new Date();
            System.out.println("At the stone, the time is " + now);
            if(beep) Toolkit.getDefaultToolkit().beep();
        }
    }
    ActionListener listener = new TimerPrinter();
    Timer time = new Timer(interval,listener)
    time.start();
   }

 TimerPrinter对外部世界完全隐藏起来，只有start方法知道它的存在。局部内部类方法只可以引用定义为final的局部变量。

 匿名内部类：
    假设只创建这个类的一个对象，就不必命名了。这种类被称为匿名内部类。

        public void start(){
           ActionListener listener = new ActionListener(){
                public void actionPerformed(ActionEvent event){
                Date now = new Date();
                System.out.println("At the stone, the time is " + now);
                if(beep) Toolkit.getDefaultToolkit().beep();
            }
        }
        Timer time = new Timer(interval,listener)
        time.start();
       }

    它的含义是创建一个实现ActionListener接口的类的新对象，需要实现的方法actionPerformed在{}里面定义。
    通常的语法格式是：
        new SuperType(construction parameters){
            inner class methods and data
        }
    其中，SuperType可以是ActionListener这样的接口，于是内部类就要实现这个接口。SuperType也可以是一个类，于是内部类就要扩展它。
由于构造器的名字必须要和类名一样，所以匿名内部类不能有构造器。取而代之的是，将构造器参数传递给超类的构造器。尤其是在内部类实现接口
的时候，不能有任何的构造参数。

    比较一下一个类对象的创建和构造一个扩展了那个类额度匿名内部类的对象的区别：
        Person queen = new Person("huahua")
        Person queen = new Person("huahua"){} //匿名内部类

        有{}就是匿名内部类

    静态内部类（加static）不产生外围引用，其它和普通内部类一样。
